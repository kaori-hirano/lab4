---
title: "Lab 4: PCA and Clustering"
author: "Kaori Hirano"
date: "6/29/23"
format: pdf
---

# Packages

```{r load-packages}
# load packages here
suppressPackageStartupMessages(library(tidyverse))
suppressPackageStartupMessages(library(readr))
library(ISLR2)
library(broom) # for tidy function
library(patchwork) # for plot placement
library(ggdendro) # for dendrograms
library(mdsr) # for later examples
```

# Data  

```{r load-data}
# load data here
load("data/vendor_data.RData")
```


# Data Wrangling

## Q1 
First, let‚Äôs fix a small issue and create a new, categorical version of income.
1. One particular respondent reported owning 80,000 houses. This is most likely untrue
(and seriously affects the standard deviation, which, as you know from the reading and
the example code, plays a key role in PCA in particular). Let‚Äôs replace this value with
NA.
2. Use the cut_number() function on the income variable to create a 10-level version of
this variable. Call this hh_income_cat10
```{r q1}
vendor_data$houses[vendor_data$houses == 80000] <- NA # replaces likely mistake with NA

# summary(vendor_data$houses) checks if works
vendor_data$hh_income_cat10 <- cut_number(vendor_data$hh_income_trim_99, 10) # cuts income into 10 groups
```

# PCA
### Q2
What are the mean and variance of the possessions variables? Does it seem like we should
scale them before doing PCA?
```{r q2}
# prints means and variances for all posession variables
cbind(mean(vendor_data$houses, na.rm = TRUE), var(vendor_data$houses, na.rm= TRUE))

cbind(mean(vendor_data$acres_farmland, na.rm = TRUE), var(vendor_data$acres_farmland, na.rm= TRUE))

cbind(mean(vendor_data$bicycles, na.rm = TRUE), var(vendor_data$bicycles, na.rm= TRUE))

cbind(mean(vendor_data$chickens, na.rm = TRUE), var(vendor_data$chickens, na.rm= TRUE))

cbind(mean(vendor_data$goats, na.rm = TRUE), var(vendor_data$goats, na.rm= TRUE))

cbind(mean(vendor_data$basic_cell_phones, na.rm = TRUE), var(vendor_data$basic_cell_phones, na.rm= TRUE))

cbind(mean(vendor_data$smart_phones, na.rm = TRUE), var(vendor_data$smart_phones, na.rm= TRUE))
??na.omit

# drops all nas for simplicity's sake
vd <- na.omit(vendor_data)
apply(vd[, 12:18], 2, mean) # we need to subset to columns 2 through 5 
                                # because first column is character column
apply(vd[, 12:18], 2, var)
```
NEEDS INTERPRETATIONS WITH SHOULD WE REDO THE VARIANCE OR WHATEVS

### Q3
Use the prcomp() function to do PCA. Create two scree plots like the ones in Figure 12.3 of
the textbook. Is there an elbow? How many components does it seem are sufficient?
```{r q3}
pr_vd <- prcomp(vd[, 12:18], scale = TRUE) 
# pr_vd

comp_vd <- pr_vd$x %>% 
  as_tibble()

pve_vd <- tibble(component = 1:ncol(comp_vd),
              var = pr_vd$sdev^2,
              pve = var/sum(var),
              cumulative = cumsum(pve))

#summary(pr_out)$importance[2, ]

## cumulative pve
#summary(pr_out)$importance[3, ]


pve_vd_plot <- ggplot(pve_vd) +
  geom_point(aes(x = component,
                 y = pve),
             color = "blue",
             shape = 1) +
  geom_line(aes(x = component,
                y = pve), 
            color = "blue") +
  labs(x = "Principal Component",
       y = "Proportion of Variance Explained") +
  theme_classic()

cpve_vd_plot <- ggplot(pve_vd) +
  geom_point(aes(x = component,
                 y = cumulative),
             color = "brown3") +
  geom_line(aes(x = component,
                y = cumulative),
             color = "brown3") +
  labs(x = "Principal Component",
       y = "Cumulative Proportion of Variance Explained") +
  ylim(c(0, 1)) +
  theme_classic()  

# using patchwork package again
pve_vd_plot + cpve_vd_plot
```
There is an elbow. 3 components seems to be sufficient. 

### Q4
Plot each of these components (the optimal number based on Q3) against household income.
Arrange the plots using the patchwork package as demonstrated in this module‚Äôs example
code. Which component(s) seem to proxy for income, if any?
```{r q4}



```


# Clustering
### Q5
Use kmeans() with ùêæ = 10. Set the seed to 67 beforehand and use 30 different starting
points.
Then do the following:
1. Report the average possession variables in each of the ten groups.
2. Calculate the average household income within each category.
3. Visualize or show in some way the concordance between the hh_income_cat10 variable
and the 10 clusters (such as a cross tab or mosaic plot).
Finally, report on how well the clustering worked to approximate income groups. Put the 10
clusters into order from least wealthy to most wealth and explain why you chose that order.
```{r q5-set-up}
#sets seed
set.seed(67)

# subsets so only numerical possessive are included
vd_pos <- vd[, 12:18]

# k means
km_out <- kmeans(vd_pos, 10, nstart = 30)
```

1. Report the average possession variables in each of the ten groups.
```{r q5-p1-the-long-way}
# gets cluster assignment for each point
(km_clusters <- km_out$cluster)

# need to group by cluster
vd_pos$cluster <- km_clusters
vd$cluster_km <- km_clusters

# gets cluster avgs for each possession variable
houses_km <- with(vd_pos, tapply(houses, cluster, mean))
af_km <- with(vd_pos, tapply(acres_farmland, cluster, mean))
bikes_km <- with(vd_pos, tapply(bicycles, cluster, mean))
chickens_km <- with(vd_pos, tapply(chickens, cluster, mean))
goats_km <- with(vd_pos, tapply(goats, cluster, mean))
cell_km <- with(vd_pos, tapply(basic_cell_phones, cluster, mean))
smart_km <- with(vd_pos, tapply(smart_phones, cluster, mean))

# prints all cluster avgs 
cbind(houses_km, af_km, bikes_km, chickens_km, goats_km, cell_km, smart_km)
```

```{r the-short-way}
km_out$centers
```
2. Calculate the average household income within each category.
```{r q5-p2}
# gets hh income mean of each cluster
cluster_mean <- with(vd, tapply(hh_income_trim_99, cluster_km, mean))
cluster_mean
```
3. Visualize or show in some way the concordance between the hh_income_cat10 variable
and the 10 clusters (such as a cross tab or mosaic plot).
```{r q5-p3}
# shows the number of instances of a household income by each cluster
vd %>%
  group_by(cluster_km, hh_income_cat10) %>%
  tally() %>%
  spread(cluster_km, n)
```
### Q6
Repeat the previous, but this time use hierarchical clustering with average linkage. Cut the
tree a 10 clusters. Answer the same three questions.
Finally: is there any overlap between the clusters created through hierarchical clustering and
the clusters created using ùêæ-means?
Note: If focusing on prediction, we could use cross-validation to try to see which linkage
approach works best, as the section on clustering in ISLR points out. We‚Äôll talk more about
that during the homework for this module

```{r q6-set-up, fig.height = 10, fig.width = 10}
#| warning = FALSE

# gets rid of nas in response
vendor_data_rm <- na.omit(vendor_data)
# remember not to scale because of instructions

# sets up distances
data_dist <- dist(vendor_data_rm)

# clusters 
al_nci <- hclust(data_dist, method = "average") %>% 
  ggdendrogram() +
  labs(title = "Average Linkage")

# cuts tree into 10 clusters
hc_out <- hclust(dist(vendor_data_rm))
hc_clusters <- cutree(hc_out, 10)
table(hc_clusters)
```
1. Report the average possession variables in each of the ten groups.
```{r q6-p1}
vd_pos$hc_clusters <- hc_clusters
vd$hc_clusters <- hc_clusters

# gets cluster avgs for each possession variable
houses_hc <- with(vd_pos, tapply(houses, hc_clusters, mean))
af_hc <- with(vd_pos, tapply(acres_farmland, hc_clusters, mean))
bikes_hc <- with(vd_pos, tapply(bicycles, hc_clusters, mean))
chickens_hc <- with(vd_pos, tapply(chickens, hc_clusters, mean))
goats_hc <- with(vd_pos, tapply(goats, hc_clusters, mean))
cell_hc <- with(vd_pos, tapply(basic_cell_phones, hc_clusters, mean))
smart_hc <- with(vd_pos, tapply(smart_phones, hc_clusters, mean))

# prints all cluster avgs 
cbind(houses_hc, af_hc, bikes_hc, chickens_hc, goats_hc, cell_hc, smart_hc)
```

2. Calculate the average household income within each category.
```{r q6-p2}
#| warnings = false
# I wasn't sure if categories meant the possession variables or clusters 
# I think it meant the variables but I added both just in case
# prints avg household income in each of the clusters
with(vd, tapply(hh_income_trim_99, hc_clusters, mean))

# prints the avg household income of each of the clusters
hc_mean <- with(vd, tapply(hh_income_trim_99, hc_clusters, mean))
hc_mean

# prints avg household income in each of the possession categories
#houses_hc_avg <- with(vd, tapply(hh_income_trim_99,houses, mean))
#af_hc_avg <- with(vd, tapply(hh_income_trim_99,acres_farmland, mean))
##bikes_hc_avg <- with(vd, tapply(hh_income_trim_99,bicycles, mean))
#chickens_hc_avg <- with(vd, tapply(hh_income_trim_99,chickens, mean))
#goats_hc_avg <- with(vd, tapply(hh_income_trim_99, goats, mean))
#cell_hc_avg <- with(vd, tapply(hh_income_trim_99, basic_cell_phones, mean))
#smart_hc_avg <- with(vd, tapply(hh_income_trim_99, smart_phones, mean))
# prints all category avgs 
#cbind(houses_hc_avg, af_hc_avg, bikes_hc_avg, chickens_hc_avg, goats_hc_avg, cell_hc_avg, smart_hc_avg)
```
3. Visualize or show in some way the concordance between the hh_income_cat10 variable
and the 10 clusters (such as a cross tab or mosaic plot).
```{r q6-p3}
# shows the instances of each cluster as the number 
# of times it shows up in the corresponding hh income level
vd %>%
  group_by(hc_clusters, hh_income_cat10) %>%
  tally() %>%
  spread(hc_clusters, n)
```
#### Q6P4
4. is there any overlap between the clusters created through hierarchical clustering and
the clusters created using ùêæ-means?

Yes, there is some overlap, but seems mostly because the K-means clustering is so spread out
that it happens to overlap with some of the data points on the hierarchical clustering.